import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.UnknownHostException;
import java.util.*;

import tuwien.auto.calimero.exception.KNXException;
import tuwien.auto.calimero.knxnetip.KNXnetIPConnection;
import tuwien.auto.calimero.link.KNXNetworkLink;
import tuwien.auto.calimero.link.KNXNetworkLinkIP;
import tuwien.auto.calimero.link.medium.KNXMediumSettings;
import tuwien.auto.calimero.link.medium.TPSettings;
import tuwien.auto.calimero.process.ProcessCommunicator;
import tuwien.auto.calimero.process.ProcessCommunicatorImpl;

public class HBAMain {
	private final static boolean DEBUG = true;	// dummy process communicator is used when true
	private static ProcessCommunicator pc;

	public static void main(String[] args) throws Exception{
		// create process communicator
		if(DEBUG){
			pc = new ProcessCommunicatorDummy(null);
		}
		else{
			final KNXNetworkLink lnk = createLink();
			pc = new ProcessCommunicatorImpl(lnk);		
			registerShutdownHandler(this);
//			KNXCommunicator KNXC = new KNXCommunicator();
//			KNXC.init();
//			pc = KNXC.pc;
		}
		
		Hashtable<String, KNXDatapoint> datapoints = new Hashtable<String, KNXDatapoint>();
		// Create Remote Communicator
		RemoteCommunicator rc = new RemoteCommunicator(datapoints);
		// Create Datapoints
		datapoints.put("OuterTemp", new KNXReadableDatapoint(pc, rc, "OuterTemp", "0.4.0", "float", 1000));
		datapoints.put("InnerTemp", new KNXReadableDatapoint(pc, rc, "InnerTemp", "0.4.1", "float", 1000));
		datapoints.put("Fan", new KNXReadWriteableDatapoint(pc, rc, "Fan", "0.1.0", "bool", 1000));
		datapoints.put("RightLight", new KNXReadWriteableDatapoint(pc, rc, "RightLight", "0.0.2", "bool", 1000));
//		datapoints.put("dpt2", new KNXWriteableDatapoint(pc, rc, "dpt2", "1.1.2", "bool"));
//		datapoints.put("dpt3", new KNXWriteableDatapoint(pc, rc, "dpt3", "1.1.3", "bool"));
//		datapoints.put("dpt4", new KNXReadWriteableDatapoint(pc, rc, "dpt4", "1.1.4", "bool", 1000));
		System.out.println("starting remote communicator");
		// Start Remote Communicator
		rc.start();
		System.out.println("starting datapoints");
		// Start all datapoint threads
		for(KNXDatapoint d : datapoints.values()){
			d.start();
		}
		
		System.out.println("waiting some time before terminating");
		Thread.sleep(10000000);
		// interrupt all datapoints
		for(KNXDatapoint d : datapoints.values()){
			d.interrupt();
		}
		// Interrupt Remote Communicator
		if(rc.s != null){
			rc.s.close();
		}
	}
	
	private static KNXNetworkLink createLink() throws KNXException {
		KNXMediumSettings medium = TPSettings.TP1;
		InetSocketAddress local;
		InetSocketAddress host;
		int mode;

		try {
			local = new InetSocketAddress(InetAddress.getByName("128.130.56.132"), 0);
			host = new InetSocketAddress(InetAddress.getByName("128.130.56.129"), new Integer(KNXnetIPConnection.IP_PORT));
		} catch (UnknownHostException e) {
			throw new KNXException("Link not created!");
		}

		mode = KNXNetworkLinkIP.TUNNEL; // KNXNetworkLinkIP.ROUTER;

		try{
			return new KNXNetworkLinkIP(mode, local, host, false, medium);
		}catch(KNXException e){
			System.out.println("ERROR: Could not create Link. Wrong local / host address?");
			return null;
		}
	}
	
	private class ShutdownHandler extends Thread {
		ShutdownHandler() {
		}

		public void run() {
			System.out.println("Shudown Handler called...");
			if (pc != null) {
				System.out.print("Detaching link...");
				final KNXNetworkLink lnk = pc.detach();

				if (lnk != null) {
					System.out.println("Closing link...");
					lnk.close();
				}
			}
		}
	}

	private static void registerShutdownHandler() {
		System.out.println("Registering Shutdown Handler...");
		Runtime.getRuntime().addShutdownHook(new ShutdownHandler());
	}
}
